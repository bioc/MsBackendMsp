% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MsBackendMsp.R
\name{MsBackendMsp}
\alias{MsBackendMsp}
\alias{MsBackendMsp-class}
\alias{backendInitialize,MsBackendMsp-method}
\alias{spectraVariableMapping,MsBackendMsp-method}
\alias{export,MsBackendMsp-method}
\title{MS data backend for msp files}
\usage{
\S4method{backendInitialize}{MsBackendMsp}(
  object,
  file,
  mapping = spectraVariableMapping(object),
  ...,
  BPPARAM = bpparam()
)

MsBackendMsp()

\S4method{spectraVariableMapping}{MsBackendMsp}(object, format = c("msp", "lipidblast", "mona"))

\S4method{export}{MsBackendMsp}(object, x, file = tempfile(), mapping = spectraVariableMapping(), ...)
}
\arguments{
\item{object}{Instance of \code{MsBackendMsp} class.}

\item{file}{\code{character} with the (full) file name(s) of the msp file(s)
from which MS/MS data should be imported or exported.}

\item{mapping}{named \code{character} vector to rename MSP fields to spectra
variables (see \code{\link[=spectraVariableMapping]{spectraVariableMapping()}}). This allows to correctly
import also custom fields or data from files with different MSP
\emph{flavors}.}

\item{...}{Currently ignored.}

\item{BPPARAM}{Parameter object defining the parallel processing
setup to import data in parallel. Defaults to \code{BPPARAM = bpparam()}. See \code{\link[=bpparam]{bpparam()}} for more information.}

\item{format}{For \code{spectraVariableMapping}: \code{character(1)} specifying for
which MSP \emph{flavour} the mapping should be returned. Currently supported
are: \code{format = "msp"} (generic MSP format, for example for MS-DIAL MSP
files), \code{format = "lipidblast"} (MSP files in LipidBlast flavour) and
\code{format = "mona"} (MSP files in MoNA flavour).}

\item{x}{For \code{export}: a \code{\link[=Spectra]{Spectra()}} object that should be exported to the
specified MSP file.}
}
\description{
The \code{MsBackendMsp} class supports import of MS/MS spectra data from
files in NIST MSP file format. \code{MsBackendMsp} extends the
\code{\link[=MsBackendDataFrame]{MsBackendDataFrame()}} backend directly and supports thus the
\code{\link[=applyProcessing]{applyProcessing()}} function to make data manipulations persistent.

New objects are created with the \code{MsBackendMsp} function. The
\code{backendInitialize} method has to be subsequently called to
initialize the object and import MS/MS data from (one or more) msp
files.

The \code{spectraVariableMapping} function allows to provide the mapping between
spectra variable names (i.e. the names that will be used for the spectra
variables in the \code{\link[=Spectra]{Spectra()}} object) and the data field names of the
MSP file. Parameter \code{format} allows to select pre-defined mapping (e.g. for
MSP files from MoNA).
}
\examples{

## Import spectra from a MSP file from LipidBlast
f <- system.file("extdata", "small-export-LipidBlast.msp",
    package = "MsBackendMsp")
be <- backendInitialize(MsBackendMsp(), f)
be

be$msLevel
be$intensity
be$mz

## precursor m/z are however all missing
be$precursorMz

## Default spectra variable mapping
spectraVariableMapping(MsBackendMsp())

## In fact, to read MSP files in "LipidBlast flavour" we should use a
## different spectra variable mapping
spectraVariableMapping(MsBackendMsp(), "lipidblast")

## Importing the data with this will correctly retrieve data
be <- backendInitialize(MsBackendMsp(), f,
    mapping = spectraVariableMapping(MsBackendMsp(), "lipidblast"))
be$precursorMz

## Other fields are also correctly mapped, but might need to be converted
## to e.g. numeric, such as "exactmass"
be$exactmass

be$exactmass <- as.numeric(be$exactmass)

be$adduct
be$formula
}
\author{
Laurent Gatto and Johannes Rainer
}
