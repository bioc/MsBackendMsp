% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions-msp.R
\name{readMsp}
\alias{readMsp}
\title{Reading MSP files}
\usage{
readMsp(f, msLevel = 2L, mapping = spectraVariableMapping(MsBackendMsp()), ...)
}
\arguments{
\item{f}{\code{character(1)} with the path to an MSP file.}

\item{msLevel}{\code{numeric(1)} with the MS level. Default is 2. This value will
be reported as the spectra's MS level \strong{unless} the source MSP file
defines the MS level.}

\item{mapping}{named \code{character} vector to rename MSP fields to spectra
variables (see \code{\link[=spectraVariableMapping]{spectraVariableMapping()}}). This allows to correctly
import also custom fields or data from files with different MSP
\emph{flavors}.}

\item{...}{Additional parameters, currently ignored.}
}
\value{
A \code{DataFrame} with each row containing the data from one spectrum
in the MSP file. m/z and intensity values are available in columns \code{"mz"}
and \code{"intensity"} in a list representation.
}
\description{
The \code{readMsp} function imports the data from a file in MGF format reading
all specified fields and returning the data as a \code{\link[=DataFrame]{DataFrame()}}.

Format contraints for MSP files:
\itemize{
\item Multiple spectra within the same MSP file should be separated by one (or
more) blank lines.
\item A line with peak data is expected to contain only values for a single peak.
The first value is expected to be the m/z value, the second the peak's
intensity. Any additional values/elements in the same line will be ignored.
}
}
\examples{

fls <- dir(system.file("extdata", package = "MsBackendMsp"),
    full.names = TRUE, pattern = "msp$")[1L]

readMsp(fls)
}
\author{
Laurent Gatto, Steffen Neumann, Johannes Rainer
}
